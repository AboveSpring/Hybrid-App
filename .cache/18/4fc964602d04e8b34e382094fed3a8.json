{"id":"node_modules/ngcomponent/index.js","dependencies":[{"name":"C:\\Users\\holmb\\Desktop\\HybridApp\\node_modules\\ngcomponent\\index.js.map","includedInParent":true,"mtime":1510971462000},{"name":"C:\\Users\\holmb\\Desktop\\HybridApp\\node_modules\\ngcomponent\\index.ts","includedInParent":true,"mtime":1510971334000},{"name":"C:\\Users\\holmb\\Desktop\\HybridApp\\package.json","includedInParent":true,"mtime":1612518138002},{"name":"C:\\Users\\holmb\\Desktop\\HybridApp\\node_modules\\ngcomponent\\package.json","includedInParent":true,"mtime":1612515740324},{"name":"lodash/assign","loc":{"line":3,"column":21},"parent":"C:\\Users\\holmb\\Desktop\\HybridApp\\node_modules\\ngcomponent\\index.js","resolved":"C:\\Users\\holmb\\Desktop\\HybridApp\\node_modules\\lodash\\assign.js"},{"name":"lodash/mapValues","loc":{"line":4,"column":24},"parent":"C:\\Users\\holmb\\Desktop\\HybridApp\\node_modules\\ngcomponent\\index.js","resolved":"C:\\Users\\holmb\\Desktop\\HybridApp\\node_modules\\lodash\\mapValues.js"},{"name":"lodash/some","loc":{"line":5,"column":19},"parent":"C:\\Users\\holmb\\Desktop\\HybridApp\\node_modules\\ngcomponent\\index.js","resolved":"C:\\Users\\holmb\\Desktop\\HybridApp\\node_modules\\lodash\\some.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar assign = require(\"lodash/assign\");\nvar mapValues = require(\"lodash/mapValues\");\nvar some = require(\"lodash/some\");\nvar NgComponent = /** @class */ (function () {\n    function NgComponent() {\n        this.__isFirstRender = true;\n        this.state = {};\n        this.props = {};\n    }\n    /*\n      eg. {\n        as: {currentValue: [1, 2, 3], previousValue: [1, 2]},\n        bs: {currentValue: 42, previousValue: undefined}\n      }\n    */\n    // nb: this method is explicity exposed for unit testing\n    NgComponent.prototype.$onChanges = function (changes) {\n        var oldProps = this.props;\n        // TODO: fix Lodash typings upstream\n        var newProps = mapValues(changes, 'currentValue');\n        // TODO: implement nextState (which also means implement this.setState)\n        var nextProps = assign({}, this.props, newProps);\n        if (this.__isFirstRender) {\n            assign(this, { props: nextProps });\n            this.componentWillMount();\n            this.render();\n            this.__isFirstRender = false;\n        }\n        else {\n            if (!this.didPropsChange(newProps, oldProps))\n                return;\n            this.componentWillReceiveProps(nextProps);\n            var shouldUpdate = this.shouldComponentUpdate(nextProps, this.state);\n            assign(this, { props: nextProps });\n            if (!shouldUpdate)\n                return;\n            this.componentWillUpdate(this.props, this.state);\n            this.render();\n            this.componentDidUpdate(this.props, this.state);\n        }\n    };\n    NgComponent.prototype.$postLink = function () {\n        this.componentDidMount();\n    };\n    NgComponent.prototype.$onDestroy = function () {\n        this.componentWillUnmount();\n    };\n    NgComponent.prototype.didPropsChange = function (newProps, oldProps) {\n        return some(newProps, function (v, k) { return v !== oldProps[k]; });\n    };\n    /*\n      lifecycle hooks\n    */\n    NgComponent.prototype.componentWillMount = function () { };\n    NgComponent.prototype.componentDidMount = function () { };\n    NgComponent.prototype.componentWillReceiveProps = function (_props) { };\n    NgComponent.prototype.shouldComponentUpdate = function (_nextProps, _nextState) { return true; };\n    NgComponent.prototype.componentWillUpdate = function (_props, _state) { };\n    NgComponent.prototype.componentDidUpdate = function (_props, _state) { };\n    NgComponent.prototype.componentWillUnmount = function () { };\n    NgComponent.prototype.render = function () { };\n    return NgComponent;\n}());\nexports.default = NgComponent;\n"},"sourceMaps":{"js":{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AACA,sCAAwC;AACxC,4CAA8C;AAC9C,kCAAoC;AAMpC;IAAA;QAKU,oBAAe,GAAG,IAAI,CAAA;QAEpB,UAAK,GAAU,EAAW,CAAA;QAC7B,UAAK,GAAmB,EAAoB,CAAA;IA2DrD,CAAC;IAzDC;;;;;MAKE;IACF,wDAAwD;IACjD,gCAAU,GAAjB,UAAkB,OAAkC;QAClD,IAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAA;QAE3B,oCAAoC;QACpC,IAAM,QAAQ,GAAG,SAAS,CAAC,OAAO,EAAE,cAAc,CAAmB,CAAA;QAErE,uEAAuE;QACvE,IAAM,SAAS,GAAG,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;QAElD,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YACzB,MAAM,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAA;YAClC,IAAI,CAAC,kBAAkB,EAAE,CAAA;YACzB,IAAI,CAAC,MAAM,EAAE,CAAA;YACb,IAAI,CAAC,eAAe,GAAG,KAAK,CAAA;QAC9B,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBAAC,MAAM,CAAA;YACpD,IAAI,CAAC,yBAAyB,CAAC,SAAS,CAAC,CAAA;YACzC,IAAM,YAAY,GAAG,IAAI,CAAC,qBAAqB,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;YACtE,MAAM,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAA;YAClC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC;gBAAC,MAAM,CAAA;YAEzB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;YAChD,IAAI,CAAC,MAAM,EAAE,CAAA;YACb,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAA;QACjD,CAAC;IACH,CAAC;IAED,+BAAS,GAAT;QACE,IAAI,CAAC,iBAAiB,EAAE,CAAA;IAC1B,CAAC;IAED,gCAAU,GAAV;QACE,IAAI,CAAC,oBAAoB,EAAE,CAAA;IAC7B,CAAC;IAES,oCAAc,GAAxB,UAAyB,QAAwB,EAAE,QAAwB;QACzE,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,UAAC,CAAC,EAAE,CAAC,IAAK,OAAA,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAjB,CAAiB,CAAC,CAAA;IACpD,CAAC;IAED;;MAEE;IACF,wCAAkB,GAAlB,cAA4B,CAAC;IAC7B,uCAAiB,GAAjB,cAA2B,CAAC;IAC5B,+CAAyB,GAAzB,UAA0B,MAAsB,IAAU,CAAC;IAC3D,2CAAqB,GAArB,UAAsB,UAA0B,EAAE,UAAiB,IAAa,MAAM,CAAC,IAAI,CAAA,CAAC,CAAC;IAC7F,yCAAmB,GAAnB,UAAoB,MAAsB,EAAE,MAAa,IAAS,CAAC;IACnE,wCAAkB,GAAlB,UAAmB,MAAsB,EAAE,MAAa,IAAS,CAAC;IAClE,0CAAoB,GAApB,cAAwB,CAAC;IACzB,4BAAM,GAAN,cAAgB,CAAC;IACnB,kBAAC;AAAD,CAAC,AAnED,IAmEC;AAED,kBAAe,WAAW,CAAA","sourcesContent":["import { IChangesObject } from 'angular'\nimport assign = require('lodash/assign')\nimport mapValues = require('lodash/mapValues')\nimport some = require('lodash/some')\n\ntype OnChanges<T> = {\n  [K in keyof T]: IChangesObject<T[K]>\n}\n\nabstract class NgComponent<\n  Props extends { [k: string]: any } = {},\n  State extends { [k: string]: any } = {}\n> {\n\n  private __isFirstRender = true\n\n  protected state: State = {} as State\n  public props: Partial<Props> = {} as Partial<Props>\n\n  /*\n    eg. {\n      as: {currentValue: [1, 2, 3], previousValue: [1, 2]},\n      bs: {currentValue: 42, previousValue: undefined}\n    }\n  */\n  // nb: this method is explicity exposed for unit testing\n  public $onChanges(changes: OnChanges<Partial<Props>>) {\n    const oldProps = this.props\n\n    // TODO: fix Lodash typings upstream\n    const newProps = mapValues(changes, 'currentValue') as Partial<Props>\n\n    // TODO: implement nextState (which also means implement this.setState)\n    const nextProps = assign({}, this.props, newProps)\n\n    if (this.__isFirstRender) {\n      assign(this, { props: nextProps })\n      this.componentWillMount()\n      this.render()\n      this.__isFirstRender = false\n    } else {\n      if (!this.didPropsChange(newProps, oldProps)) return\n      this.componentWillReceiveProps(nextProps)\n      const shouldUpdate = this.shouldComponentUpdate(nextProps, this.state)\n      assign(this, { props: nextProps })\n      if (!shouldUpdate) return\n\n      this.componentWillUpdate(this.props, this.state)\n      this.render()\n      this.componentDidUpdate(this.props, this.state)\n    }\n  }\n\n  $postLink() {\n    this.componentDidMount()\n  }\n\n  $onDestroy() {\n    this.componentWillUnmount()\n  }\n\n  protected didPropsChange(newProps: Partial<Props>, oldProps: Partial<Props>): boolean {\n    return some(newProps, (v, k) => v !== oldProps[k])\n  }\n\n  /*\n    lifecycle hooks\n  */\n  componentWillMount(): void {}\n  componentDidMount(): void {}\n  componentWillReceiveProps(_props: Partial<Props>): void { }\n  shouldComponentUpdate(_nextProps: Partial<Props>, _nextState: State): boolean { return true }\n  componentWillUpdate(_props: Partial<Props>, _state: State): void {}\n  componentDidUpdate(_props: Partial<Props>, _state: State): void {}\n  componentWillUnmount() {}\n  render(): void {}\n}\n\nexport default NgComponent\n"]}},"error":null,"hash":"dbe668c62b9151a1207f78966c7886c8","cacheData":{"env":{}}}